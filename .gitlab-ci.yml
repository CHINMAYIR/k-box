## K-Box Continuous Integration script

stages:
  - build
  - test
  - build_release
  - release
  - deploy

cache:
  key: "kbox"
  paths:
  - .composer-cache/
  - node_modules/ # TODO: cache the NPM cache location
  - resources/assets/vendor # TODO: cache the Bower cache location (or drop bower entirely)

variables:
    CONTAINER_RELEASE_IMAGE_BASE: $CI_REGISTRY/images/dms

## Making sure that the composer cache folder is the one we have in the CI cache
before_script:
  - export COMPOSER_CACHE_DIR=`pwd`/.composer-cache


## Composer Install script
## performs composer install with dev dependencies and syntax check
.composer_install: &composer_install
  stage: test
  script:
    - cp env.ci .env
    - composer install --prefer-dist
    - ./vendor/bin/parallel-lint --exclude vendor .


## Building the artifacts for release

frontend:
  image: node:4.5
  stage: build
  tags:
    - docker
  script:
    - npm install
    - node_modules/.bin/bower install --allow-root
    - node_modules/.bin/gulp --production
  artifacts:
    expire_in: 1 day
    paths:
    - public/

laravel:
  image: "docker.klink.asia:5043/klink/php-ci-docker:7.0-alpine"
  tags:
    - docker
  stage: build
  script:
    - cp env.ci .env
    - composer install --no-dev --prefer-dist
  artifacts:
    expire_in: 1 day
    paths:
    - vendor/
    - public/js/nls/

## Testing

test-syntax:5.6:
  <<: *composer_install
  image: "docker.klink.asia:5043/klink/php-ci-docker:5.6-alpine"
  tags:
    - docker

test-syntax:7.0:
  <<: *composer_install
  image: "docker.klink.asia:5043/klink/php-ci-docker:7.0-alpine"
  tags:
    - docker

language_check:
  ## Execute the check over the translation to find untranslated strings
  stage: test
  script:
    - cp env.ci .env
    - composer install --prefer-dist
    - php artisan lang:check --report=translations.txt
  image: "docker.klink.asia:5043/klink/php-ci-docker:7.0-alpine"
  allow_failure: false
  tags:
    - docker
  only:
   - master
  artifacts:
    paths:
    - translations.txt

unit_test:
  stage: test
  image: "docker.klink.asia:5043/klink/php-ci-docker:7.0-alpine"
  services:
    - mariadb:10.0
  variables:
    MYSQL_DATABASE: dms_test
    MYSQL_USER: dms
    MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    MYSQL_PASSWORD: dms
  script:
    - cp env.ci .env
    - cp env.ci testing.env
    - composer install --prefer-dist
    - php artisan migrate --env=testing --force
    - php artisan db:seed --env=testing --force
    - vendor/bin/phpunit
  allow_failure: true
  tags:
    - docker
  artifacts:
    expire_in: 1 week
    paths:
    - storage/logs/

## Release the docker image

## Normal branch release, we create local images for being used during tests
branch_release:
  stage: release
  script:
    - sed -i "s/BUILDVERSION/${CI_BUILD_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_BUILD_REF}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e info@klink.asia $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} .
    - docker push $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}
  tags:
    - shell
  except:
    - tags
  dependencies:
  - frontend
  - laravel

## Tagged releases
tagged_release:
  stage: release
  script:
    - sed -i "s/BUILDVERSION/${CI_BUILD_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_BUILD_REF}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e info@klink.asia $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} .
    - docker push $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD -e info@klink.asia $CI_REGISTRY
    - docker tag -f $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} "$CONTAINER_RELEASE_IMAGE_BASE:${CI_BUILD_REF_NAME/v/}"
    - docker tag -f $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:${CI_BUILD_REF_NAME/v/}"
  tags:
    - shell
  only:
    - tags
  dependencies:
  - frontend
  - laravel


## Deploy on review environments

## the test.klink.asia instance with the new image
test_klink_asia_deploy:
  environment: Review
  except:
    - release
  when: manual
  stage: deploy
  tags:
    - shell
  variables:
    INSTANCE_PREFIX: $TEST_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER 
    DOCKER_LOCATION: $TEST_DOCKER_FOLDER 
  script: 
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e info@klink.asia $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}
    - cd ${DOCKER_LOCATION}
    - docker tag -f $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} dms-testing-environment
    - docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} stop && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} rm -v -f && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} up -d frontend


## the dms.klink.asia instance with the new image
dms_klink_asia_deploy:
  environment: Staging
  when: manual
  stage: deploy
  tags:
    - shell
  variables:
    INSTANCE_PREFIX: $DMS_INSTANCE_PREFIX
    BUILD_LOCATION: $BUILD_FOLDER 
    DOCKER_LOCATION: $PROD_DOCKER_FOLDER
  script: 
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN -e info@klink.asia $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/}
    - cd ${DOCKER_LOCATION}
    - docker tag -f $CI_REGISTRY_IMAGE:${CI_BUILD_REF_NAME/v/} dms-staging-environment
    - docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} stop && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} rm -v -f && docker-compose -f docker-compose-kbox.yml -p ${INSTANCE_PREFIX} up -d frontend
  only:
    - master
    - release

