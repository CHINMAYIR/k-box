stages:
  - build
  - test
  - build_production
  - build_docker
  - deploy

cache:
  key: "$CI_BUILD_REF_NAME"
  group: sharedcache
  paths:
  - vendor/
  - node_modules/
  - resources/assets/vendor

build_dev:
# performs only composer install with dev dependencies
  stage: build
  script:
    - mv env.ci .env
    - composer install --prefer-dist
    - mv .env env.ci
  except:
    - triggers
    - tags
  tags:
    - php
    - nodejs
    - shell
    
linting:
# check if the php files contains syntax error and mess-detector
  stage: test
  script:
    - mv env.ci .env
    - ./vendor/bin/parallel-lint --exclude vendor .
    - mv .env env.ci
  except:
    - triggers
    - tags
  tags:
    - php
    - nodejs
    - shell

build_prod:
# perform the build to be used in production
  stage: build_production
  script:
    - mv env.ci .env
    - composer install --no-dev --prefer-dist
    - npm install
    - bower install
    - gulp --production
    - php artisan dms:lang-publish
    - mv .env env.ci
    - sed -i "s/BUILDCODE/${CI_BUILD_REF}/g" ./config/dms.php
    - tar --transform 's,^.,dms,' -cz . $TAR_PARAMETERS > ${BUILD_FOLDER}/klink-dms-$CI_BUILD_REF_NAME.tar.gz
  only:
    - release
    - triggers
  tags:
    - php
    - nodejs
    - shell

build_docker_test_image:
  stage: build_docker
  script: 
    - cp ${BUILD_FOLDER}/klink-dms-$CI_BUILD_REF_NAME.tar.gz ${TEST_DOCKER_FOLDER}/dms/downloads/dms.tar.gz
    - cd ${TEST_DOCKER_FOLDER}
    - docker-compose -f klink-services.yml -p ${TEST_INSTANCE_PREFIX} build dmsproject 
  only:
    - triggers
  tags:
    - shell

    
run_test_image:
  stage: deploy
  script: 
    - cd ${TEST_DOCKER_FOLDER}
    - docker-compose -f docker-compose-kbox.yml -p ${TEST_INSTANCE_PREFIX} stop && docker-compose -f docker-compose-kbox.yml -p ${TEST_INSTANCE_PREFIX} rm -v -f && docker-compose -f docker-compose-kbox.yml -p ${TEST_INSTANCE_PREFIX} up -d frontend
  only:
    - triggers
  tags:
    - shell
    
build_docker_prod_image:
  stage: build_docker
  script: 
    - cp ${BUILD_FOLDER}/klink-dms-$CI_BUILD_REF_NAME.tar.gz ${PROD_BUILD_DOCKER_FOLDER}/dms/downloads/klink-dms-project-edition.tar.gz
    - cd ${PROD_BUILD_DOCKER_FOLDER}
    - docker-compose -f klink-services.yml build dmsproject
  only:
    - release
  tags:
    - shell
    
dms_klink_asia_deploy:
  stage: deploy
  script: 
    - docker-compose -f ${PROD_DOCKER_FOLDER}/docker-compose-kbox.yml up -d frontend
  only:
    - release
  tags:
    - shell